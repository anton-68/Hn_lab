# 01.05.01

LogTo("c2power4_w.log");

# Basic structures

sdp:=[];

#a2:=Group([(1,2)(3,4)(5,6)(7,8)(9,10)(11,12)(13,14)(15,16)]);
a2:=Group([(1,2)]);
a2_list:=List(a2);
#b2:=Group([(1,3)(2,4)(5,7)(6,8)(9,11)(10,12)(13,15)(14,16)]);
b2:=Group([(1,3)]);
b2_list:=List(b2);
#c2:=Group([(1,5)(3,7)(2,6)(4,8)(9,13)(10,14)(11,15)(12,16)]);
c2:=Group([(1,5)]);
c2_list:=List(c2);
#d2:=Group([(1,9)(2,10)(3,11)(4,12)(5,13)(6,14)(7,15)(8,16)]);
d2:=Group([(1,9)]);
d2_list:=List(d2);

a2_b2:=DirectProduct(a2,b2);
a2_b2_list:=List(a2_b2);
Print("\na2_b2\n",a2_b2);
Print("\n",a2_b2_list);
c2_d2:=DirectProduct(c2,d2);
c2_d2_list:=List(c2_d2);
Print("\nc2_d2\n",c2_d2);
Print("\n",c2_d2_list);

a2_b2_c2:=DirectProduct(a2_b2,c2);
a2_b2_c2_list:=List(a2_b2_c2);
Print("\na2_b2_c2\n",a2_b2_c2);
Print("\n",a2_b2_c2_list);

aut_a2_b2:=AutomorphismGroup(a2_b2);
aut_a2_b2_list:=List(aut_a2_b2);
aut_c2_d2:=AutomorphismGroup(c2_d2);
aut_c2_d2_list:=List(aut_c2_d2);

aut_a2_b2_c2:=AutomorphismGroup(a2_b2_c2);
aut_a2_b2_c2_list:=List(aut_a2_b2_c2);


#
# Creating dihedral group of order 8 as semidirect product of C_2 and Klein group
#

alpha:=GroupHomomorphismByImages(c2,aut_a2_b2,[c2_list[2]],[aut_a2_b2_list[6]]);
a2_b2xc2:=SemidirectProduct(c2,alpha,a2_b2);
a2_b2xc2_list:=List(a2_b2xc2);
aut_a2_b2xc2:=AutomorphismGroup(a2_b2xc2);
aut_a2_b2xc2_list:=List(aut_a2_b2xc2);
Print("\na2_b2xc2\n",a2_b2xc2);
Print("\n",a2_b2xc2_list);
Print("\n\n");

#
# Generating Semidirect products of C_2 and C_2^3
#

for ae in [1..Size(aut_a2_b2_c2)] do
	flag:=true;
#	Print("\nAutomorphism No.:",ae);
#	Print("\nAutomorphism:\n",aut_a2_b2_c2_list[ae]);
	alpha:=GroupHomomorphismByImages(d2,aut_a2_b2_c2,
		[d2_list[2]],[aut_a2_b2_c2_list[ae]]);
	if alpha <> fail then
#		Print("\nalpha:\n",alpha);
		a2_b2_c2xd2:=SemidirectProduct(d2,alpha,a2_b2_c2);
#		Print("\nPretender:\n",a2_b2_c2xd2);
		for i in [1..Size(sdp)] do
			if IsomorphismGroups(sdp[i],a2_b2_c2xd2) <> fail then 
				flag:=false;
				break;
			fi;
		od;
		if flag then
			Add(sdp,a2_b2_c2xd2);
			Print("\nAdded group:\n",a2_b2_c2xd2);
		fi;
	fi;
od;

#
# Generating Semidirect Product of C_2 and Dihedral Group
#

for ae in [1..Size(aut_a2_b2xc2)] do
	flag:=true;
#	Print("\nAutomorphism No.:",ae);
#	Print("\nAutomorphism:\n",aut_a2_b2xc2_list[ae]);
	alpha:=GroupHomomorphismByImages(d2,aut_a2_b2xc2,
		[d2_list[2]],[aut_a2_b2xc2_list[ae]]);
	if alpha <> fail then
#		Print("\nalpha:\n",alpha);
		c2zd8:=SemidirectProduct(d2,alpha,a2_b2xc2);
#		Print("\nPretender:\n",c2zd8);
		for i in [1..Size(sdp)] do
			if IsomorphismGroups(sdp[i],c2zd8) <> fail then 
				flag:=false;
				break;
			fi;
		od;
		if flag then
			Add(sdp,c2zd8);
			Print("\nAdded group:\n",c2zd8);
		fi;
	fi;
od;

#
# Generating Semidirect Power of Klein group
#


for ae in [1..Size(aut_a2_b2)] do
for be in [1..Size(aut_c2_d2)] do
	flag:=true;
#	Print("\nAutomorphism A, No.:",ae);
#	Print("\nAutomorphism A:\n",aut_a2_b2_list[ae]);
#	Print("\nAutomorphism B, No.:",be);
#	Print("\nAutomorphism B:\n",aut_c2_d2_list[be]);
	alpha:=GroupHomomorphismByImages(a2_b2,aut_c2_d2,
		[a2_b2_list[2],a2_b2_list[3]],
		[aut_c2_d2_list[ae],aut_c2_d2_list[be]]);
	if alpha <> fail then
#		Print("\nalpha:\n",alpha);
		c2_2z2_2:=SemidirectProduct(a2_b2,alpha,c2_d2);
#		Print("\nPretender:\n",c2_2z2_2);
		for i in [1..Size(sdp)] do
			if IsomorphismGroups(sdp[i],c2_2z2_2) <> fail then 
				flag:=false;
				break;
			fi;
		od;
		if flag then
			Add(sdp,c2_2z2_2);
			Print("\nAdded group:\n",c2_2z2_2);
		fi;
	fi;
od;od;

#
# Output. Additional check. Finished. 
#

Print("\n");
Print("\nFinded groups:\n",sdp);
Print("\n\n");

for i in [1..Size(sdp)] do
	Print("\nGroup ",i);
	Print("\nGroup Type in the Atlas: ", List(IdGroup(sdp[i]))[2]);
	Print("\n",List(sdp[i]));
od;	

Print("\n");

LogTo();