
AllHnNiMatchings := function()
#
# Finds all non-isomorpfic perfect matchings in Hn
#
# 
#
local Matchings, Pretender, n, EdgesList, SizeOfMatching, NumberOfVertexes, p, j, i;
Matchings := [];
Pretender := [];
SizeOfMatching := 8;
NumberOfVertexes := 16;
n := [1..SizeOfMatching];
EdgesList := List(UndirectedEdges(Hypercube(4)));
p := SizeOfMatching;
repeat
  Pretender := [];
  for j in [1..SizeOfMatching] do
    Add(Pretender, EdgesList[n[j]]);     
  od;
  if IsMatchingVL(Pretender) then
    if not ExistInVL(Pretender, Matchings) then
      Add(Matchings, Pretender);
    fi;
  fi;
  if n[SizeOfMatching] = NumberOfVertexes then p := p - 1;
    else p := SizeOfMatching;
  fi;
  if p >= 1 then
    for i in [SizeOfMatching..p] do
      n[i] := n[p] + i - p + 1;
    od;
  fi;
until p >= 1;
Print("\n\nNon-isomorphic perfect matchings in 4-cube:\n");
for i in [1..Size(Matchings)] do
  Print("\nMatching No. ", i);
  Print("\n\n");
  Print(Matchings[i]);
  Print("\n");
od;
Print("Total: ", Size(Matchings));
end;



IsMatchingVL := function(gammaVL)
#
# Check if gammaVL is a list of edge of matching
#
#
#
local VertexesList, SSVertexesList, i;
VertexesList := [];
SSVertexesList := [];
for i in gammaVL do
  Append(VertexesList, [i[1],i[2]]);
od;
SSVertexesList := SSortedList(VertexesList);
if Size(VertexesList) = Size(SSVertexesList) then return true;
  else return false; fi;
end;

ExistInVL := function(h_subgraph, hs_list)
#
# Check if hs_list already contains isomorphical h4-subgraph 
# represented as VL
#
#
local AutH4List, vs, i;
AutH4List := List(AutGroupGraph(Hypercube(4)));
vs:=[];

for i in [1..Size(h_subgraph)] do
  Append(vs, h_subgraph[i]); od;

for i in [1..Size(AutH4List)] do
  if Permuted([1..16], AutH4List[i]) = vs then
    return true; fi; od;
return false;
end;



